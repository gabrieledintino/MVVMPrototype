//
//  MVVMPrototypeTests-MVVMPrototypeMocks.generated.swift
//  MVVMPrototype
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import MVVMPrototype
@testable import Mockingbird
import Foundation
import Swift
import SwiftUI

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked NetworkClientProtocol
public final class NetworkClientProtocolMock: MVVMPrototype.NetworkClientProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = MVVMPrototype.NetworkClientProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "MVVMPrototype"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    NetworkClientProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `fetchDrivers`()
  public func `fetchDrivers`() async throws -> [MVVMPrototype.Driver] {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`fetchDrivers`() async throws -> [MVVMPrototype.Driver]", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier(([MVVMPrototype.Driver]).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () async throws -> [MVVMPrototype.Driver] { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: [MVVMPrototype.Driver] = try await mkbObject.`fetchDrivers`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([MVVMPrototype.Driver]).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `fetchDrivers`() async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> [MVVMPrototype.Driver], [MVVMPrototype.Driver]> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> [MVVMPrototype.Driver], [MVVMPrototype.Driver]>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`fetchDrivers`() async throws -> [MVVMPrototype.Driver]", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier(([MVVMPrototype.Driver]).self)))
  }

  // MARK: Mocked `fetchRaceResults`(forDriver `driverId`: String)
  public func `fetchRaceResults`(forDriver `driverId`: String) async throws -> [MVVMPrototype.Race] {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`fetchRaceResults`(forDriver `driverId`: String) async throws -> [MVVMPrototype.Race]", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`driverId`)], returnType: Swift.ObjectIdentifier(([MVVMPrototype.Race]).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) async throws -> [MVVMPrototype.Race] { return try await mkbImpl(`driverId`) }
      if let mkbImpl = mkbImpl as? () async throws -> [MVVMPrototype.Race] { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: [MVVMPrototype.Race] = try await mkbObject.`fetchRaceResults`(forDriver: `driverId`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([MVVMPrototype.Race]).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `fetchRaceResults`(forDriver `driverId`: @autoclosure () -> String) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (String) async throws -> [MVVMPrototype.Race], [MVVMPrototype.Race]> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (String) async throws -> [MVVMPrototype.Race], [MVVMPrototype.Race]>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`fetchRaceResults`(forDriver `driverId`: String) async throws -> [MVVMPrototype.Race]", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`driverId`)], returnType: Swift.ObjectIdentifier(([MVVMPrototype.Race]).self)))
  }
}

/// Returns a concrete mock of `NetworkClientProtocol`.
public func mock(_ type: MVVMPrototype.NetworkClientProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> NetworkClientProtocolMock {
  return NetworkClientProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
